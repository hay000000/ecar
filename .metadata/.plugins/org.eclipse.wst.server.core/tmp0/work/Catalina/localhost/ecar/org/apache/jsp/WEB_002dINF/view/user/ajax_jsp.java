/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2021-03-18 02:53:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1609913827220L));
    _jspx_dependants.put("jar:file:/C:/Users/sa365/Desktop/springworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ecar/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/sa365/Desktop/springworkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ecar/WEB-INF/lib/jstl-1.2.jar!/META-INF/sql.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>막대/선 그래프로 게시글 작성자의 건수 출력하기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div style=\"width: 75%\">\r\n");
      out.write("\t\t<canvas id=\"canvas\"></canvas>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"map\" style=\"width: 750px; height: 350px;\"></div>\r\n");
      out.write("\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=a17f98afa9ca291cceb19b84cb97d30f\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도의 중심좌표\r\n");
      out.write("    mapOption = { \r\n");
      out.write("        center: new kakao.maps.LatLng(33.451475, 126.570528), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    }; \r\n");
      out.write("\r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("var positions = [\r\n");
      out.write("    {\r\n");
      out.write("        title: '카카오', \r\n");
      out.write("        latlng: new kakao.maps.LatLng(33.450705, 126.570677)\r\n");
      out.write("    },\r\n");
      out.write("    {\r\n");
      out.write("        title: '생태연못', \r\n");
      out.write("        latlng: new kakao.maps.LatLng(33.450936, 126.569477)\r\n");
      out.write("    },\r\n");
      out.write("    {\r\n");
      out.write("        title: '텃밭', \r\n");
      out.write("        latlng: new kakao.maps.LatLng(33.450879, 126.569940)\r\n");
      out.write("    },\r\n");
      out.write("    {\r\n");
      out.write("        title: '근린공원',\r\n");
      out.write("        latlng: new kakao.maps.LatLng(33.451393, 126.570738)\r\n");
      out.write("    }\r\n");
      out.write("];\r\n");
      out.write("\r\n");
      out.write("for(let i=0; i < positions.length; i++){\r\n");
      out.write("    var data = positions[i];\r\n");
      out.write("    displayMarker(data);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 지도에 마커를 표시하는 함수입니다    \r\n");
      out.write("function displayMarker(data) { \r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("        map: map,\r\n");
      out.write("        position: data.latlng\r\n");
      out.write("    });\r\n");
      out.write("    var overlay = new kakao.maps.CustomOverlay({\r\n");
      out.write("        yAnchor: 3,\r\n");
      out.write("        position: marker.getPosition()\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    var content = document.createElement('div');\r\n");
      out.write("    content.innerHTML =  data.title;\r\n");
      out.write("    content.style.cssText = 'background: white; border: 1px solid black';\r\n");
      out.write("    \r\n");
      out.write("    var closeBtn = document.createElement('button');\r\n");
      out.write("    closeBtn.innerHTML = '닫기';\r\n");
      out.write("    closeBtn.onclick = function () {\r\n");
      out.write("        overlay.setMap(null);\r\n");
      out.write("    };\r\n");
      out.write("    content.appendChild(closeBtn);\r\n");
      out.write("    overlay.setContent(content);\r\n");
      out.write("\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("        overlay.setMap(map);\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
